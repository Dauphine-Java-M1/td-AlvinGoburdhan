Alvin Goburdhan

TD 00 *----------------------------------------*

EXERCICE 1 

4) Apache Maven 3.6.0

6) Le repertoire Target contient classes et maven-status 

8) Classpath est un paramètre passé à une machine virtuelle Java qui définit le chemin d'accès au répertoire où se trouvent les classes et les packages Java afin qu'elle les exécute.



EXERCICE 3 

1) aucun attribut manifest principal dans target/td00-1.0-SNAPSHOT.jar
2) java compile  puis java-cp 
3) System.out.println();
4) toString
5) public static void main(String[] args) {
6) GetField, SetOfInteger
7) refactor

td 0 bis *-----------------------------------------*

1) git init -> git local

3) git add : pom.xlm(configuration de maven), App.java, RESPONSES.txt 

4) git commit -m initial import
! commenté lors d'un commit

5) 
	-	pc.initRandom(100,1000);
	+       pc.initRandom(100,2000);
        	pc.printPrimes(numbers);
        	System.out.println(pc);

la ligne marqué par '+' représente la ligne comportant des nouvelles modifications apportées

6) 
git add src/main/java/fr/dauphine/ja/goburdhanalvin/td00/PrimeCollection.java
git commit -m 'Increase random generator upper bound'
Ca contient seulement les modification apportées au fichier cloné

7) En apportant des modifications sur la même ligne du fichier REPONSES.txt cela aurait créer un conflit et git nous aurait proposer de choisir entre les deux modifications apportées.

8) 7a1bcd5439c6ed593e31003d00e15f1670a09287

EXERCICE 2 

2) git remote add origin https://github.com/Dauphine-Java-M1/td-AlvinGoburdhan.git
3) git push origin master
4) git clone https://github.com/Dauphine-Java-M1/td-AlvinGoburdhan.git clone-de-javaavance

5) ERREUR 

6) REPONSES.txt contient les modifications ajoutée au début du fichier et à la fin du fichier.

7) il y a aurait un conflit car les modifications étaient sur la même ligne


EXERCICE 3 
 
2) Une fenêtre JUnit affiche un test valide 
En remplacant true par false, le test n'est plus valide
La methode AssertTrue verifie la condition en parametre est vrai ou non.


tp1 revision *------------------------------------------*


1)Un nouvel objet Point() est créé avec des variable x et y non initialisé.  

2)The variables x et y sont privates.
remplacé par public 

3)il s'agit du principe de l'encapsulation pour que les autres utilisateurs ne puissent pas modifier les données comme ils le veulent , il faut donc utiliser des acceseurs.

4) oui, c'est une méthode get qui permet de récupérer la valeur d’une variable privée.

5)erreur , il faut implémenter le contructeur Point()

6) ca fonctionne

7) Ajouter une variable static et l’incrémenter à chaque appel du constructeur.


8) A l'aide de la signature et des parametres données


EXERCICE 2 

1)True puis False car le point P3 a une nouvelle adresse mémoire contrairement a p1 et p2


3) L'index de p2 est 0 alors qu'il n'a pas été ajouté directement dans la list car p2 est le même objet que p1 qui a été ajouté dans la liste.

L'index de p3 est -1 car il n'a pas été trouvé dans la liste

Il faut redefinir equals 


EXERCICE 3 

5)

6) pointCapacity est le nombre de points max défini dans le constructeur et nbPoints est le nombre de points dans la liste 

EXERCICE 4

1) void translate(dx, dy) ou Point translate(dx, dy) :

5) c2 n’est pas modifié par la méthode translate dans le cas ou elle retourne un nouveau Circle, il faudrait faire  c2 = c2.translate(1, 1).

6) Ca ne translate pas le cercle car on appelle la fonction translate de la classe point, il faut utiliser directement la fonction translate de Circle 


9) On utilise Static car cette fonction n’appartient pas à un Circle en particulier.


EXERCICE 5

1) Non car un anneau et un cercle n’ont pas des méthodes en commun donc l’héritage.

4) Il faut redéfinir la méthode toString pour afficher les caractéristiques de ring.




